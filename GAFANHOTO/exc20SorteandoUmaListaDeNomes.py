# 20. Crie um programa que sorteie uma lista de nomes fornecida pelo usu√°rio e exiba a lista em ordem aleat√≥ria.

# # O programa deve solicitar ao usu√°rio que insira uma lista de nomes separados por v√≠rgula e, em seguida, exibir a lista em uma ordem aleat√≥ria.  

# # Exemplo de entrada: "Ana, Jo√£o, Maria, Pedro"

import random  # Importa a fun√ß√£o shuffle do m√≥dulo random para embaralhar a lista
# shuffle() embaralha a lista de forma aleat√≥ria, alterando a ordem dos elementos na lista original.

lista1 = ["Ana", "Jo√£o", "Maria", "Pedro"]


# O m√©todo .split(",") divide a string em uma lista de nomes, usando a v√≠rgula como delimitador. [OU SEJA, A V√çRGULA N√ÉO √â INCLU√çDA NA LISTA]

print("Lista original:", lista1)

# original = lista1.copy()  # Faz uma c√≥pia da lista original para preservar a ordem original

print('A ordem de apresenta√ß√£o ser√°: ', random.shuffle(lista1), "Retorna NONE "
      "porque eu n√£o atribu√≠ o embaralhamento antes de chamar a lista.")  # Exibe a lista embaralhada



""" üîÑ Por que random.shuffle() retorna None?
O m√©todo random.shuffle() √© projetado para alterar a ordem dos elementos da lista fornecida diretamente, sem criar uma nova lista. Essa abordagem √© eficiente em termos de mem√≥ria e segue a filosofia do Python de que "expl√≠cito √© melhor que impl√≠cito". Como resultado, ele n√£o retorna a lista modificada, mas sim None.

Para que o c√≥digo funcione conforme o esperado, voc√™ deve chamar random.shuffle(lista1) em uma linha separada e, em seguida, imprimir lista1. Veja o exemplo corrigido: """

random.shuffle(lista1)  # Embaralha a lista original de forma aleat√≥ria
print('A ordem de apresenta√ß√£o ser√°: ', lista1)  # Exibe a lista embaralhada
